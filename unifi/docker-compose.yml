# TODO: filter logs of the connection

version: "3.4"
services:
  unifi-controller:
    platform: linux/arm/v7
    image: unifi_temp
    restart: on-failure:3
    depends_on:
      mongodb-server:
        condition: service_healthy
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=Europe/Berlin
    ports:
      - 8443:8443
      - 3478:3478/udp
      - 10001:10001/udp
      - 8080:8080
      - 1900:1900/udp #optional
      - 8843:8843 #optional
      - 8880:8880 #optional
      - 6789:6789 #optional
      - 5514:5514/udp #optional
    healthcheck:
      test: ["CMD", "curl", "-kILsf", "unifi-controller:8080"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 120s
    volumes:
      - type: bind
        read_only: true
        source: ./compose-root/defaults/system.properties
        target: /defaults/system.properties

  #https://github.com/docker-library/healthcheck/blob/master/mongo/docker-healthcheck
  mongodb-server:
    platform: linux/arm/v7
    image: mongodb_armhf
    restart: on-failure:3
    environment:
     - MONGO_OUT_FILTER_PATTERN=^.* I NETWORK.*received client metadata from.*
    #expose - Available only to other containers within this compose
    expose:
      - 27017
    # https://www.mongodb.com/docs/v4.0/reference/configuration-options/
    command: ["--storageEngine=mmapv1", "--smallfiles", "--quiet", "--nojournal"]
    # From: https://github.com/docker-library/healthcheck/blob/master/mongo/docker-healthcheck
    healthcheck:
      test: ["CMD", "mongo", "--quiet", "mongodb-server/test", "--eval", 'quit(db.runCommand({ ping: 1 }).ok ? 0 : 2)']
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 15s

    #environment:
    #  - MONGO_INITDB_ROOT_USERNAME=admin
    #  - MONGO_INITDB_ROOT_PASSWORD=password
    
#volumes:
#  mongodb_data:
#    driver: local